:root{
    /*primary colors*/
    --Marine-blue: hsl(213, 96%, 18%);
    --Purplish-blue: hsl(243, 100%, 62%);
    --Pastel-blue: hsla(228, 100%, 84%, 0.212);
    --Light-blue: hsla(206, 94%, 87%, 0.347);
    --Strawberry-red: hsl(354, 84%, 57%);

    /*neutral colors*/
    --Cool-gray: hsla(231, 11%, 63%, 0.653);
    --Light-gray: hsl(229, 24%, 87%);
    --Magnolia: hsl(217, 100%, 97%);
    --Alabaster: hsl(231, 100%, 99%);
    --White: hsl(0, 0%, 100%);
}

/*reset default settings*/
html, body {
    margin: 0;
    padding: 0;
    line-height: 1.3;
    font-size: 16px;
    background-color: var(--Light-blue);
    box-sizing: border-box;
    font-family: sans-serif;
}
body{
    position: relative;
    min-height: 100vh;
}
h1, h2, h3, h4, p{
    margin: 0;
}

/*top background image*/
#top-background-image{
    background-image: url(assets/images/bg-sidebar-mobile.svg);
    background-repeat: none;
    background-position: center;
    background-size: cover;
    height: 200px;
}

/*Bottom container*/
#bottom-container{
    background-color: var(--White);
    padding: 1rem;
    width: 100%;
    bottom: 0;
    box-sizing: border-box;
    position: absolute;
}
/*Next button*/
.next-btn{
    padding: 0.7rem 1.5rem;
    border: 0;
    font-size: 1rem;
    border-radius: 5px;
    color: var(--White);
    background-color: var(--Marine-blue);
    position: relative;
    left: 75%;
}
.next-btn:hover{background-color: hsla(213, 96%, 18%, 0.603);}
/*Go back button*/
.go-back-btn{
    font-size: 1rem;
    font-weight: bold;
    padding: 0.5rem 1rem;
    color:hsla(213, 96%, 18%, 0.603);
    right: 24%;
    border: 0;
    position: relative;
    background-color: transparent;
}
.go-back-btn:hover{color: var(--Marine-blue);}

/*Page indicatos*/
#page-indicators{
    top: 9%;
    left: 50%;
    gap: 20px;
    transform: translate(-50%, -50%);
    gap: 10px;
    position: absolute;
    display: flex;
    text-align: center;
}
.indicators{
    font-size: 1rem;
    width: 20px;
    height: 20px;
    padding: 0.3rem;
    border-radius: 50px;
    color: var(--White);
    border: 1px solid var(--White);
    text-align: center;
    background-color: transparent;
}


/*form container*/
form{
    width: min(90%, 50rem);
    background-color: var(--White);
    padding: 1.5rem 1rem;
    border-radius: 10px;
    translate: 0% -15%;
    box-shadow: 2px 10px 15px 2px rgba(0, 0, 0, 0.183);
    box-sizing: border-box;
    margin-inline: auto;
    position: relative;
}

/*PAGE ONE*/
#page-one h1{
    font-size: 1.5rem;
    color: var(--Marine-blue);
    margin-bottom: 0.3rem;
}
#page-one-instruction{
    opacity: 50%;
}
.page-one-containers{
    margin-top: 1.5rem;
}
#page-one-input-container label{
    color: var(--Marine-blue);
}
#page-one-input-container input{
    width: 100%;
    font-size: 1rem;
    padding: 0.5rem;
    border: 1.5px solid var(--Light-gray);
    border-radius: 3px;
    box-sizing: border-box;
}
#page-one-input-container input:hover{
    border-color: var(--Purplish-blue);
}
#page-one-input-container input:focus{
    outline: none;
    border-color: var(--Purplish-blue);
}
.label-and-error-message{
    display: flex;
    justify-content: space-between;
}
.error-message{
    font-size: 0.8rem;
    color: red;
}


/*PAGE TWO*/
#page-two h1{
    font-size: 1.5rem;
    color: var(--Marine-blue);
    margin-bottom: 0.3rem;
}
/*another thing I have learnt is to use the exact name of the attribute
you used to target the element in CSS to also select the element in JavaScript so 
you can always override the CSS styles when you dynamically add class styles*/
.plans-btns{
    width: 100%;
    padding: 1rem;
    margin-top: 1rem;
    border-radius: 5px;
    border: 1.5px solid var(--Cool-gray);
    background-color: transparent;
    display: flex;
    align-items: center;
}
.plans-btns:hover{
    border-color: var(--Purplish-blue);
    background-color: var(--Pastel-blue);
}
.plan-and-price{
    margin-left: 0.5rem;
    text-align: left;
}
.name-of-plan{
    font-size: 1rem;
    margin-bottom: 0.1rem;
    color: var(--Marine-blue);
    font-weight: bold;
}
.price-of-plan{
    font-size: 0.8rem;
    opacity: 50%;
}
.two-months-free{
    font-size: 0.6rem;
    color: var(--Marine-blue);
    margin-top: 0.3rem;
}
#bottom-container-desktop{
    padding-left: 2rem;
}


/*class styles*/
.hide{display: none;}
.show{display: block;}
.selected{
    border-color: var(--Purplish-blue);
    background-color: var(--Pastel-blue);
}
/*something I have also learnt from this project is to always place 
your class styles at the very end because if you don't, the styles of 
the elements will override the class style you are trying to apply*/




/*MEDIA QUERY*/
/*to remove the next btn in the desktop screensize when 
width is below 800px*/
@media (max-width: 800px) {
    #bottom-container-desktop{
        display: none;
    }
    .page-indicators-desktop{display: none;}
}

@media (min-width: 800px) {
    /*elements to remove from desktop screensize*/
    #top-background-image{display: none;};
    #bottom-container{display: none;}
    #page-indicators{display: none;}
    #page-one-input-container{
        margin-top: 1.5rem;
    }

    /*PAGE ONE*/
    /*to place the form at the center of the screen*/
    body{
        place-content: center;
    };

    form{
        gap: 30px;
        height: 500px;
        translate: none;
        display: flex;
    }

    #pages-and-btns{
        width: 100%;
    }

    #desktop-background-image{
        width: 50%;
        border-radius: 10px;
        background-image: url(assets/images/bg-sidebar-desktop.svg);
        background-repeat: none;
        background-position: center;
        background-size: cover;
    }
    .page-indicators-desktop{
        padding: 2rem 1rem 0 1.5rem; 
    };
    .page-indicator-containers{
        margin-bottom: 1rem;
        display: flex;
    }
    .steps-and-heading p{
        opacity: 50%;
    }
    .steps-and-heading h3{
        font-size: 1rem;
    }
    .steps-and-heading{
        margin-left: 1rem;
        color: var(--White);
        text-align: left;
    }
    #pages-and-btns{
        display: flex;
        flex-direction: column;
    }
    #page-containers{
        padding: 1.5rem 3rem;
    }
    #bottom-container-desktop{
        margin-top: 1rem;
    }

    /*PAGE TWO*/
    #plans-btns-container{
        gap: 10px;
        box-sizing: border-box;
        display: flex;
    }
    #plans-btns-container button{
        gap: 60px;
        padding-left: 0.5rem;
        flex-direction: column;
        align-items: start;
    }


}

/*The steps indicator and bottom container appear in 2 places depending
on the screeensize; when it's mobile, the indicators are at the top of the
screen, while the bottom container for the next btn and go back btn 
are below the screen. I don't want to create 2 btns for each actions 
that are meant to serve the same purpose, so I had to find a way to make sure the 
same elements that appeared for mobile are the same ones that also appear for desktop screensize.
To do this, I applied a class style to the elements that make the styles consistent
across screen sizes, then I duplicate the containers the btns are in to the desktop screen size.
Then I use querySelectorAll and the forEach method to make sure the actions set
are applied to the element regardless of what screensize they appear in. Note that I apply display none
to their respective containers depending on the screensize of the user

/*code for toggle button*/
.switch{
    position: relative;
    display: inline-block;
    width: 57px;
    height: 20px;
}
/*hide default html checkbox*/
.switch input{
    opacity: 0;
    width: 0;
    height: 0;
}
/*the slider*/
.slider{
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--Marine-blue);
    transition: .4s;
    -webkit-transition: .4s;
}
.slider:before{
    position: absolute;
    content: '';
    height: 15px;
    width: 15px;
    left: 10px;
    bottom: 2px;
    background-color: var(--White);
    transition: .4s;
    -webkit-transition: .4s;
}
input:checked + .slider:before{
    -webkit-transform: translatex(26px);
    -ms-transform: translatex(26px);
    transform: translateX(26px);
}
/*rounded sliders*/
.slider.round{
    border-radius: 34px;
}
.slider.round:before{
    border-radius: 50%;
}
#toggle-container{
    padding: 0.5rem;
    gap: 10px;
    border-radius: 5px;
    display: flex;
    justify-content: center;
    margin-top: 1rem;
    background-color: var(--Magnolia);
}
#toggle-container p{
    font-size: 0.9rem;
}